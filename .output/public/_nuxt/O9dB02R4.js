import{r as t}from"./B_OshFF3.js";import"./DjTJqZtn.js";const n={async createFolder(e){try{const r=await t("/wapi/fileServer/file/folder/create",{method:"POST",body:e});if(r.code===0)return!0;throw new Error(r)}catch(r){throw new Error(r)}},async editFolder(e){try{const r=await t("/wapi/fileServer/file/folder/create",{method:"POST",body:e});if(r.code===0)return!0;throw new Error(r)}catch(r){throw new Error(r)}},async deleteFolder(e){try{const r=await t("/wapi/fileServer/file/folder/del",{method:"POST",body:e});if(r.code===0)return!0;throw new Error(r)}catch(r){throw new Error(r)}},async getFolderList(){try{const e=await t("/wapi/fileServer/file/folder/list",{method:"POST",body:{}});if(e.code===0)return e.data;throw new Error(e)}catch(e){throw new Error(e)}},async moveFolder(e){try{const r=await t("/wapi/fileServer/file/folder/move",{method:"POST",body:e});if(r.code===0)return!0;throw new Error(r)}catch(r){throw new Error(r)}},async getFileList(e,r){try{const o=await t("/wapi/fileServer/file/file/list",{method:"POST",body:e,signal:r.signal});if(o.code===0)return o.data;throw new Error(o)}catch(o){throw new Error(o)}},async deleteFile(e){try{const r=await t("/wapi/taskServer/api/v1/transcription/task/del",{method:"POST",body:e});if(r.code===0)return r.data;throw new Error(r)}catch(r){throw new Error(r)}},async renameFile(e){try{const r=await t("/wapi/fileServer/file/file/rename",{method:"POST",body:e});if(r.code===0)return r.data;throw new Error(r)}catch(r){throw new Error(r)}},async moveFile(e){try{const r=await t("/wapi/fileServer/file/file/move",{method:"POST",body:e});if(r.code===0)return r.data;throw new Error(r)}catch(r){throw new Error(r)}},async transcribeFile(e){try{const r=await t("/wapi/taskServer/api/v1/transcription/tasks",{method:"POST",body:e});if(r.code===0)return r.data;throw new Error(r)}catch(r){throw new Error(r)}},async getCosPreSignedUrl(){try{const e=await t("/wapi/fileServer/file/presigned/url",{method:"POST"});if(e.code===0)return e.data}catch(e){throw new Error(e)}},async saveFileInfo(e){try{const r=await t("/wapi/fileServer/file/meta-info",{method:"POST",body:e});if(r.code===0)return r.data}catch(r){throw new Error(r)}},async queryTaskStatus(e){try{const r=await t("/wapi/taskServer/api/v1/transcription/task/status",{method:"POST",body:{taskIds:e}});if(r.code===0)return r.data}catch(r){throw new Error(r)}},async createFileByLink(e){try{const r=await t("/wapi/fileServer/file/file/uploadUrl",{method:"POST",body:e});if(r.code===0)return r.data;throw new Error(r)}catch(r){throw new Error(r)}},async getFileUploadStatus(e){try{const r=await t("/wapi/fileServer/file/file/uploadUrlStatus",{method:"POST",body:e});if(r.code===0)return r.data;throw new Error(r)}catch(r){throw new Error(r)}},async syncExport(e){try{const r=await t("/wapi/fileServer/tran/export",{method:"POST",body:e});if(r.code===0)return r.data;throw new Error(r)}catch(r){throw new Error(r)}},async asyncExport(e){try{const r=await t("/wapi/fileServer/tran/batch/export",{method:"POST",body:e});if(r.code===0)return r.data;throw new Error(r)}catch(r){throw new Error(r)}},async asyncExportStatus(e){try{const r=await t("/wapi/fileServer/tran/export/status",{method:"POST",body:e});if(r.code===0)return r.data;throw new Error(r)}catch(r){throw new Error(r)}},async asyncExportStatusWithOutToken(e){try{const r=await t("/wapi/fileServer/tran/export/statush5",{method:"POST",body:e});if(r.code===0)return r.data;throw new Error(r)}catch(r){throw new Error(r)}},async asyncExportWithoutToken(e){try{const r=await t("/wapi/fileServer/tran/batch/exporth5",{method:"POST",body:e});if(r.code===0)return r.data}catch(r){throw new Error(r)}}};export{n as useFolderApi};
